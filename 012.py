"""
    Problem 12
    ==========
    
    The sequence of triangle numbers is generated by adding the natural
    numbers. So the 7^th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 =
    28. The first ten terms would be:
    
    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
    
    Let us list the factors of the first seven triangle numbers:
    
    1: 1
    3: 1,3
    6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28
    
    We can see that 28 is the first triangle number to have over five
    divisors.
    
    What is the value of the first triangle number to have over five hundred
    divisors?
    
    Answer: 8091de7d285989bbfa9a2f9f3bdcc7c0
    
"""
from common import check

PROBLEM_NUMBER = 12
ANSWER_HASH = "8091de7d285989bbfa9a2f9f3bdcc7c0"

def number_of_factors(n):
    num = 0
    rt = n**0.5
    f = 1
    factors = [True]*int(rt)
    while f < rt:
        if not factors[f]:
            continue
        if n % f == 0:
            num += 2
        else:
            f += 1
    if f == rt:
        num += 1
    return num

size = 10000000

# calculate the triangular numbers
numbers = [0] * size
numbers[0] = 1
for i in range(2,size):
    numbers[i-1] = numbers[i-2] + i

max = 0
max_i = 0
for i in range(1,size):
    num = number_of_factors(i)
    if num > max:
        max = num
        max_i = i
        if max > 500:
            break

check(max_i, PROBLEM_NUMBER, ANSWER_HASH)